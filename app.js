// This question is asked by Microsoft. Given a string, return the index of its first unique character. If a unique character does not exist, return -1.

// Ex: Given the following strings...

// "abcabd", return 2
// "thedailybyte", return 1
// "developer", return 0

function firstUniqueCharater(str) {
  let map1 = {};
  const str1 = str.split(",").join();
  for (let a of str1) {
    map1[a] = map1[a] ? map1[a] + 1 : 1;
  }
  console.log(map1);
  for (let a in map1) {
    // console.log(map1[a]);
    if (map1[a] == 1) {
      return str.indexOf(a);
    }
  }
}
console.log(firstUniqueCharater("abcabd"));

// This question is asked by Google. You are given two strings, s and t which only consist of lowercase letters. t is generated by shuffling the letters in s as well as potentially adding an additional random character. Return the letter that was randomly added to t if it exists, otherwise, return ’  ‘.
// Note: You may assume that at most one additional character can be added to t.

// Ex: Given the following strings...

// s = "foobar", t = "barfoot", return 't'
// s = "ide", t = "idea", return 'a'
// s = "coding", t "ingcod", return ''

function findLetter(str1, str2) {
  const str11 = str1.split(",").join("");
  const str22 = str2.split(",").join("");
  let map1 = {},
    map2 = {};
  console.log(str11, str22);
  for (let a of str11) {
    map1[a] = map1[a] ? map1[a] + 1 : 1;
  }
  for (let a of str22) {
    map2[a] = map2[a] ? map2[a] + 1 : 1;
  }
  let max = {},
    min = {};

  str1.length > str2.length
    ? ((max = map1), (min = map2))
    : ((max = map2), (min = map1));

  console.log(map1, map2);

  for (let s in max) {
    if (max[s] !== min[s]) {
      return s;
    }
  }
}
console.log(findLetter("foobar", "barfoot"));

// This question is asked by Google. Given two integer arrays, return their intersection.
// Note: the intersection is the set of elements that are common to both arrays.

// Ex: Given the following arrays...

// nums1 = [2, 4, 4, 2], nums2 = [2, 4], return [2, 4]
// nums1 = [1, 2, 3, 3], nums2 = [3, 3], return [3]
// nums1 = [2, 4, 6, 8], nums2 = [1, 3, 5, 7], return []

function intersectionNumbers(arr) {
  let map1 = {};
  const arr1 = [];
  for (let a of arr) {
    map1[a] = map1[a] ? map1[a] + 1 : 1;
    if (map1[a] > 1) arr1.push(a);
  }
  return arr1;
}
console.log(intersectionNumbers([2, 4, , 2, 4, 8, 8]));
